hist(beta.avg)
plot(alpha.avg, beta.avg)
y <- c(5, 1, 5, 14, 3, 19, 1, 1, 4, 22)
t <- c(94.3, 15.7, 62.9, 126, 5.24, 31.4, 1.05, 1.05, 2.1, 10.5)
gamma(y[1]/t[1]+1)
gamma(y[1]/t[1]+1)
gamma(y[1]/t[1]+1)
a <- dgamma(gamma(y/t + 1), rate=y+alpha[j+1], scale=t+beta[j+1])/dgamma(gamma(), rate=y+alpha[j], scale=t+beta[j])
alpha[1] <- rexp(1, rate=1)
beta[1] <- rgamma(1, shape=0.1, rate=1)
alpha <- c(1:(n+1))
beta <- c(1:(n+1))
alpha[1] <- rexp(1, rate=1)
beta[1] <- rgamma(1, shape=0.1, rate=1)
alpha <- c(1:(n+1))
n <- 5000
alpha <- c(1:(n+1))
beta <- c(1:(n+1))
alpha[1] <- rexp(1, rate=1)
beta[1] <- rgamma(1, shape=0.1, rate=1)
alpha[2] <- alpha[1] + rnorm(1, mean = 0, sd=.05)
beta[2] <- beta[1] + rnorm(1, mean = 0, sd=.05)
dgamma(gamma(y/t + 1), rate=y+alpha[2], scale=t+beta[2])/dgamma(gamma(), rate=y+alpha[1], scale=t+beta[1])
a <- c(1:length(y))
alpha <- c(1:(n+1))
beta <- c(1:(n+1))
a <- 1
alpha[1] <- rexp(1, rate=1)
beta[1] <- rgamma(1, shape=0.1, rate=1)
for (j in 1:n) {
alpha[j+1] <- alpha[j] + rnorm(1, mean = 0, sd=.05)
beta[j+1] <- beta[j] + rnorm(1, mean = 0, sd=.05)
for (i in 1:length(y)) {
a <- a*min(1,dgamma(gamma(y[i]/t[i] + 1), rate=y[i]+alpha[j+1], scale=t[i]+beta[j+1])/dgamma(gamma(y[i]/t[i] + 1), rate=y[i]+alpha[j], scale=t[i]+beta[j]))
}
print(a)
u <- runif(1,0,1)
alpha[j+1] <- ifelse(u<=a, alpha[j+1], alpha[j])
beta[j+1] <- ifelse(u<=a, beta[j+1], beta[j])
}
alpha <- c(1:(n+1))
beta <- c(1:(n+1))
a <- 1
alpha[1] <- rexp(1, rate=1)
beta[1] <- rgamma(1, shape=0.1, rate=1)
for (j in 1:n) {
alpha[j+1] <- alpha[j] + rnorm(1, mean = 0, sd=.05)
beta[j+1] <- beta[j] + rnorm(1, mean = 0, sd=.05)
for (i in 1:length(y)) {
a <- a*min(1,dgamma(gamma(y[i]/t[i] + 1), shape=y[i]+alpha[j+1], rate=t[i]+beta[j+1])/dgamma(gamma(y[i]/t[i] + 1), shape=y[i]+alpha[j], rate=t[i]+beta[j]))
}
print(a)
u <- runif(1,0,1)
alpha[j+1] <- ifelse(u<=a, alpha[j+1], alpha[j])
beta[j+1] <- ifelse(u<=a, beta[j+1], beta[j])
}
alpha
1 %% 10
12 %% 10
alpha <- c(1:(n+1))
beta <- c(1:(n+1))
a <- 1
alpha[1] <- rexp(1, rate=1)
beta[1] <- rgamma(1, shape=0.1, rate=1)
for (j in 1:n) {
alpha[j+1] <- alpha[j] + rnorm(1, mean = 0, sd=.05)
beta[j+1] <- beta[j] + rnorm(1, mean = 0, sd=.05)
a <- min(1,dgamma(gamma(y[j%%10]/t[j%%10] + 1), shape=y[j%%10]+alpha[j+1], rate=t[j%%10]+beta[j+1])/dgamma(gamma(y[j%%10]/t[j%%10] + 1), shape=y[j%%10]+alpha[j], rate=t[j%%10]+beta[j]))
print(a)
u <- runif(1,0,1)
alpha[j+1] <- ifelse(u<=a, alpha[j+1], alpha[j])
beta[j+1] <- ifelse(u<=a, beta[j+1], beta[j])
}
alpha
y <- c(5, 1, 5, 14, 3, 19, 1, 1, 4, 22)
t <- c(94.3, 15.7, 62.9, 126, 5.24, 31.4, 1.05, 1.05, 2.1, 10.5)
n <- 5000
set.seed(1)
alpha <- c(1:(n+1))
beta <- c(1:(n+1))
a <- 1
alpha[1] <- rexp(1, rate=1)
beta[1] <- rgamma(1, shape=0.1, rate=1)
for (j in 1:n) {
alpha[j+1] <- alpha[j] + rnorm(1, mean = 0, sd=.01)
beta[j+1] <- beta[j] + rnorm(1, mean = 0, sd=.01)
a <- min(1,dgamma(gamma(y[j%%10]/t[j%%10] + 1), shape=y[j%%10]+alpha[j+1], rate=t[j%%10]+beta[j+1])/dgamma(gamma(y[j%%10]/t[j%%10] + 1), shape=y[j%%10]+alpha[j], rate=t[j%%10]+beta[j]))
print(a)
u <- runif(1,0,1)
alpha[j+1] <- ifelse(u<=a, alpha[j+1], alpha[j])
beta[j+1] <- ifelse(u<=a, beta[j+1], beta[j])
}
alpha
hist(alpha)
hist(beta)
plot(alpha,beta)
set.seed(1)
alpha <- c(1:(n+1))
beta <- c(1:(n+1))
a <- 1
alpha[1] <- rexp(1, rate=1)
beta[1] <- rgamma(1, shape=0.1, rate=1)
for (j in 1:n) {
alpha[j+1] <- alpha[j] + rnorm(1, mean = 0, sd=.02)
beta[j+1] <- beta[j] + rnorm(1, mean = 0, sd=.02)
a <- min(1,dgamma(gamma(y[j%%10]/t[j%%10] + 1), shape=y[j%%10]+alpha[j+1], rate=t[j%%10]+beta[j+1])/dgamma(gamma(y[j%%10]/t[j%%10] + 1), shape=y[j%%10]+alpha[j], rate=t[j%%10]+beta[j]))
print(a)
u <- runif(1,0,1)
alpha[j+1] <- ifelse(u<=a, alpha[j+1], alpha[j])
beta[j+1] <- ifelse(u<=a, beta[j+1], beta[j])
}
set.seed(1)
alpha <- c(1:(n+1))
beta <- c(1:(n+1))
a <- 1
alpha[1] <- rexp(1, rate=1)
beta[1] <- rgamma(1, shape=0.1, rate=1)
for (j in 1:n) {
alpha[j+1] <- alpha[j] + rnorm(1, mean = 0, sd=.01)
beta[j+1] <- beta[j] + rnorm(1, mean = 0, sd=.01)
a <- min(1,dgamma(gamma(y[j%%10]/t[j%%10] + 1), shape=y[j%%10]+alpha[j+1], rate=t[j%%10]+beta[j+1])/dgamma(gamma(y[j%%10]/t[j%%10] + 1), shape=y[j%%10]+alpha[j], rate=t[j%%10]+beta[j]))
print(a)
u <- runif(1,0,1)
alpha[j+1] <- ifelse(u<=a, alpha[j+1], alpha[j])
beta[j+1] <- ifelse(u<=a, beta[j+1], beta[j])
}
set.seed(1)
alpha <- c(1:(n+1))
beta <- c(1:(n+1))
a <- 1
alpha[1] <- rexp(1, rate=1)
beta[1] <- rgamma(1, shape=0.1, rate=1)
for (j in 1:n) {
alpha[j+1] <- alpha[j] + rnorm(1, mean = 0, sd=.012)
beta[j+1] <- beta[j] + rnorm(1, mean = 0, sd=.012)
a <- min(1,dgamma(gamma(y[j%%10]/t[j%%10] + 1), shape=y[j%%10]+alpha[j+1], rate=t[j%%10]+beta[j+1])/dgamma(gamma(y[j%%10]/t[j%%10] + 1), shape=y[j%%10]+alpha[j], rate=t[j%%10]+beta[j]))
print(a)
u <- runif(1,0,1)
alpha[j+1] <- ifelse(u<=a, alpha[j+1], alpha[j])
beta[j+1] <- ifelse(u<=a, beta[j+1], beta[j])
}
hist(alpha)
hist(beta)
plot(alpha,beta)
y <- c(5, 1, 5, 14, 3, 19, 1, 1, 4, 22)
t <- c(94.3, 15.7, 62.9, 126, 5.24, 31.4, 1.05, 1.05, 2.1, 10.5)
set.seed(1)
n <- 5000
#initialize starting values
alpha <- c(1:11)
beta <- c(1:11)
gamma <- c(1:10)
alpha[1] <- rexp(1, rate=1)
beta[1] <- rgamma(1, shape=0.1, rate=1)
alpha.avg <- c(1:n)
beta.avg <- c(1:n)
gamma.avg <- c(1:n)
#MH withing Gibbs
for (j in 1:n) {
for (i in 1:length(y)) {
#Estimate gamma
gamma[i] <- rgamma(1, shape=y[i]+alpha[i], rate=t[i]+beta[i])
#Estimate alpha
alpha.proposal <- rnorm(1, mean = 0, sd=.05) + alpha[i]
u <- runif(1,0,1)
p <- min(((beta[i]^alpha.proposal)*(gamma[i]^(alpha.proposal-1))*(exp(alpha.proposal))/gamma(alpha.proposal))/((beta[i]^alpha[i])*(gamma[i]^(alpha[i]-1))*(exp(alpha[i]))/gamma(alpha[i])),1)
alpha[i+1] <- ifelse(u<=p,alpha.proposal,alpha[i])
#Estimate beta
beta[i+1] <- rgamma(1,shape=(alpha[i+1]+.1),rate=(gamma[i]+1))
}
alpha.avg[j] <- mean(alpha)
beta.avg[j] <- mean(beta)
gamma.avg[j] <- mean(gamma)
alpha[1] <- alpha.avg[j]
beta[1] <- beta.avg[j]
}
hist(alpha.avg)
hist(beta.avg)
plot(alpha.avg, beta.avg)
set.seed(1)
alpha <- c(1:(n+1))
beta <- c(1:(n+1))
a <- 1
alpha[1] <- rexp(1, rate=1)
beta[1] <- rgamma(1, shape=0.1, rate=1)
for (j in 1:n) {
alpha[j+1] <- alpha[j] + rnorm(1, mean = 0, sd=.012)
beta[j+1] <- beta[j] + rnorm(1, mean = 0, sd=.012)
a <- min(1,dgamma(gamma(y[j%%10]/t[j%%10] + 1), shape=y[j%%10]+alpha[j+1], rate=t[j%%10]+beta[j+1])/dgamma(gamma(y[j%%10]/t[j%%10] + 1), shape=y[j%%10]+alpha[j], rate=t[j%%10]+beta[j]))
print(a)
u <- runif(1,0,1)
alpha[j+1] <- ifelse(u<=a, alpha[j+1], alpha[j])
beta[j+1] <- ifelse(u<=a, beta[j+1], beta[j])
}
hist alpha
hist(alpha)
hist(beta)
plot(alpha,beta)
install.packages("kernlab")
library(kernlab)
library(ggplot2)
library(kernlab)
x1 <- c(4,4,8,-2.5,0,-0.3,2.5,-1)
x2 <- c(1,-1,2,0,1,-1,-1,1)
x3 <- c(1,0,1,0,1,0,1,0)
y <- c(1,1,1,-1,-1,-1,-1,-1)
df <- data.frame(x1=x1, x2=x2, x3=x3, y=y)
library(ggplot2)
library(kernlab)
x1 <- c(4,4,8,-2.5,0,-0.3,2.5,-1)
x2 <- c(1,-1,2,0,1,-1,-1,1)
x3 <- c(1,0,1,0,1,0,1,0)
y <- c(1,1,1,-1,-1,-1,-1,-1)
df <- data.frame(x1=x1, x2=x2, x3=x3, y=y)
linear.svm <- ksvm(y ~ ., data=df, type='C-svc', kernel='vanilladot',
C=10, scale=c(),scaled = FALSE)
alpha(linear.svm)
linear.svm <- ksvm(y ~ ., data=df, type='C-svc', kernel='vanilladot',
C=10, scale=c(),scaled = FALSE)
linear.svm <- ksvm(y ~ ., data=df, type='C-svc', kernel='vanilladot',
C=10, scale=c(),scaled = FALSE)
linear.svm <- ksvm(y ~ ., data=df, type='C-svc', kernel='vanilladot' ,scaled = FALSE)
df <- data.frame(x1=x1, x2=x2, x3=x3, y=y)
linear.svm <- ksvm(y~., data=df, type='C-svc', kernel='vanilladot' ,scaled = FALSE)
alpha(linear.svm)
linear.svm
linear.svm$alpha
linear.svm
summary(linear.svm)
linear.svm@alpha
linear.svm@b
new.df <- data.frame(x1=c(5.4, 1.5, -3.4, -2.2), x2=c(1.2, -2, 1, -1), x3=c(2,3,-2,-4))
predict(linear.svm, newdata=new.df, type='response')
linear.svm@nSV
linear.svm@alphaindex
linear.svm@b
y <- c(8/61, 32/61, 40/61, 163/61)
x9 <- c(5.4, 1.2, 2, 1)
x10 <- c(1.5, -2, 3, 1)
x11 <- c(-3.4, 1, -2, 1)
x12 <- c(-2.2, -1, -4, 1)
sum(y*x9)
sum(y*x10)
sum(y*x11)
sum(y*x12)
y <- c(4.2621, -1.0492, 0.7868, 2.6721)
x9 <- c(5.4, 1.2, 2, 1)
x10 <- c(1.5, -2, 3, 1)
x11 <- c(-3.4, 1, -2, 1)
x12 <- c(-2.2, -1, -4, 1)
sum(y*x9)
sum(y*x10)
sum(y*x11)
sum(y*x12)
y <- c(4.2621, -1.0492, 0.7868, -2.6721)
x9 <- c(5.4, 1.2, 2, 1)
x10 <- c(1.5, -2, 3, 1)
x11 <- c(-3.4, 1, -2, 1)
x12 <- c(-2.2, -1, -4, 1)
sum(y*x9)
sum(y*x10)
sum(y*x11)
sum(y*x12)
new.df <- data.frame(x1=c(5.4, 1.5, -3.4, -2.2), x2=c(1.2, -2, 1, -1), x3=c(2,3,-2,-4))
predict(linear.svm, newdata=new.df, type='response')
library(ggplot2)
library(kernlab)
x1 <- c(4,4,8,-2.5,0,-0.3,2.5,-1)
x2 <- c(1,-1,2,0,1,-1,-1,1)
x3 <- c(1,0,1,0,1,0,1,0)
y <- c(1,1,1,-1,-1,-1,-1,-1)
df <- data.frame(x1=x1, x2=x2, x3=x3, y=y)
p <- ggplot(data=df, aes(x=x1, y=x2, color=factor(y)))
p + geom_point()
fun.1 <- function(x1,x2) {
4.2621*x1 - 1.0492*x2 -2.6721
}
p + geom_point() + stat_function(fun = fun.1) + xlim(-5,5)
fun.1 <- function(x) {
(4.2621/1.0492)*x -2.6721/1.0492
}
p + geom_point() + stat_function(fun = fun.1) + xlim(-5,5)
library(ggplot2)
library(kernlab)
fun.1 <- function(x) {
(4.2621/1.0492)*x -2.6721/1.0492
}
x1 <- c(4,4,8,-2.5,0,-0.3,2.5,-1)
x2 <- c(1,-1,2,0,1,-1,-1,1)
x3 <- c(1,0,1,0,1,0,1,0)
y <- c(1,1,1,-1,-1,-1,-1,-1)
df <- data.frame(x1=x1, x2=x2, x3=x3, y=y)
p <- ggplot(data=df, aes(x=x1, y=x2, color=factor(y)))
p + geom_point() + stat_function(fun = fun.1) + xlim(-5,5)
fun.1(1.4)
fun.1(1.5)
fun.1(-3.4)
library(dplyr)
library(randomForest)
library(corrplot)
library(MASS)
library(car)
library(caret)
setwd("D:\\Program File\\Git\\git_projects\\INDE 498\\INDE498_Project")
train <- read.csv("train.csv")
# finding the dimension of our datasets
dim(train)
#Data cleaning for train
train$Alley <- as.character(train$Alley)
train$Alley[is.na(train$Alley)] <- "none"
train$Alley <- as.factor(train$Alley)
train$MasVnrType <- as.character(train$MasVnrType)
train$MasVnrType[is.na(train$MasVnrType)] <- "none"
train$MasVnrType <- as.factor(train$MasVnrType)
train$MasVnrArea[is.na(train$MasVnrArea)] <- 0
train$BsmtQual <- as.character(train$BsmtQual)
train$BsmtQual[is.na(train$BsmtQual)] <- "none"
train$BsmtQual <- as.factor(train$BsmtQual)
train$BsmtCond <- as.character(train$BsmtCond)
train$BsmtCond[is.na(train$BsmtCond)] <- "none"
train$BsmtCond <- as.factor(train$BsmtCond)
train$BsmtExposure <- as.character(train$BsmtExposure)
train$BsmtExposure[is.na(train$BsmtExposure)] <- "none"
train$BsmtExposure <- as.factor(train$BsmtExposure)
train$BsmtFinType1 <- as.character(train$BsmtFinType1)
train$BsmtFinType1[is.na(train$BsmtFinType1)] <- "none"
train$BsmtFinType1 <- as.factor(train$BsmtFinType1)
train$BsmtFinType2 <- as.character(train$BsmtFinType2)
train$BsmtFinType2[is.na(train$BsmtFinType2)] <- "none"
train$BsmtFinType2 <- as.factor(train$BsmtFinType2)
train$FireplaceQu <- as.character(train$FireplaceQu)
train$FireplaceQu[is.na(train$FireplaceQu)] <- "none"
train$FireplaceQu <- as.factor(train$FireplaceQu)
train$GarageType <- as.character(train$GarageType)
train$GarageType[is.na(train$GarageType)] <- "none"
train$GarageType <- as.factor(train$GarageType)
train$GarageFinish <- as.character(train$GarageFinish)
train$GarageFinish[is.na(train$GarageFinish)] <- "none"
train$GarageFinish <- as.factor(train$GarageFinish)
train$GarageQual <- as.character(train$GarageQual)
train$GarageQual[is.na(train$GarageQual)] <- "none"
train$GarageQual <- as.factor(train$GarageQual)
train$GarageCond <- as.character(train$GarageCond)
train$GarageCond[is.na(train$GarageCond)] <- "none"
train$GarageCond <- as.factor(train$GarageCond)
train$PoolQC <- as.character(train$PoolQC)
train$PoolQC[is.na(train$PoolQC)] <- "none"
train$PoolQC <- as.factor(train$PoolQC)
train$Fence <- as.character(train$Fence)
train$Fence[is.na(train$Fence)] <- "none"
train$Fence <- as.factor(train$Fence)
train$MiscFeature <- as.character(train$MiscFeature)
train$MiscFeature[is.na(train$MiscFeature)] <- "none"
train$MiscFeature <- as.factor(train$MiscFeature)
train$LotFrontage[is.na(train$LotFrontage)] <- 0
train <- train %>% filter(!is.na(Electrical) & !is.na(GarageYrBlt))
#Removing rare factors
train <- train %>% group_by(MSSubClass) %>% filter(n() >= 6) %>%
group_by(MSZoning) %>% filter(n() >= 6) %>%
group_by(Alley) %>% filter(n() >= 6) %>%
group_by(LotShape) %>% filter(n() >= 6) %>%
group_by(LandContour) %>% filter(n() >= 6) %>%
group_by(LotConfig) %>% filter(n() >= 6) %>%
group_by(Neighborhood) %>% filter(n() >= 6) %>%
group_by(Condition1) %>% filter(n() >= 6) %>%
group_by(Condition2) %>% filter(n() >= 6) %>%
group_by(BldgType) %>% filter(n() >= 6) %>%
group_by(HouseStyle) %>% filter(n() >= 6) %>%
group_by(OverallQual) %>% filter(n() >= 6) %>%
group_by(OverallCond) %>% filter(n() >= 6) %>%
group_by(RoofStyle) %>% filter(n() >= 6) %>%
group_by(RoofMatl) %>% filter(n() >= 6) %>%
group_by(Exterior1st) %>% filter(n() >= 6) %>%
group_by(Exterior2nd) %>% filter(n() >= 6) %>%
group_by(MasVnrType) %>% filter(n() >= 6) %>%
group_by(ExterQual) %>% filter(n() >= 6) %>%
group_by(ExterCond) %>% filter(n() >= 6) %>%
group_by(Foundation) %>% filter(n() >= 6) %>%
group_by(BsmtQual) %>% filter(n() >= 6) %>%
group_by(BsmtCond) %>% filter(n() >= 6) %>%
group_by(BsmtExposure) %>% filter(n() >= 6) %>%
group_by(BsmtFinType1) %>% filter(n() >= 6) %>%
group_by(BsmtFinType2) %>% filter(n() >= 6) %>%
group_by(Heating) %>% filter(n() >= 6) %>%
group_by(HeatingQC) %>% filter(n() >= 6) %>%
group_by(CentralAir) %>% filter(n() >= 6) %>%
group_by(KitchenQual) %>% filter(n() >= 6) %>%
group_by(Functional) %>% filter(n() >= 6) %>%
group_by(FireplaceQu) %>% filter(n() >= 6) %>%
group_by(GarageType) %>% filter(n() >= 6) %>%
group_by(GarageFinish) %>% filter(n() >= 6) %>%
group_by(GarageQual) %>% filter(n() >= 6) %>%
group_by(GarageCond) %>% filter(n() >= 6) %>%
group_by(PavedDrive) %>% filter(n() >= 6) %>%
group_by(PoolQC) %>% filter(n() >= 6) %>%
group_by(Fence) %>% filter(n() >= 6) %>%
group_by(SaleType) %>% filter(n() >= 6) %>%
group_by(SaleCondition) %>% filter(n() >= 6)
train$MSSubClass <- factor(train$MSSubClass)
train$MSZoning <- factor(train$MSZoning)
train$Alley <- factor(train$Alley)
train$LotShape <- factor(train$LotShape)
train$LandContour <- factor(train$LandContour)
train$LotConfig <- factor(train$LotConfig)
train$Neighborhood <- factor(train$Neighborhood)
train$Condition1 <- factor(train$Condition1)
train$Condition2 <- factor(train$Condition2)
train$BldgType <- factor(train$BldgType)
train$HouseStyle <- factor(train$HouseStyle)
train$OverallQual <- factor(train$OverallQual)
train$OverallCond <- factor(train$OverallCond)
train$RoofStyle <- factor(train$RoofStyle)
train$RoofMatl <- factor(train$RoofMatl)
train$Exterior1st <- factor(train$Exterior1st)
train$Exterior2nd <- factor(train$Exterior2nd)
train$MasVnrType <- factor(train$MasVnrType)
train$ExterQual <- factor(train$ExterQual)
train$ExterCond <- factor(train$ExterCond)
train$Foundation <- factor(train$Foundation)
train$BsmtQual <- factor(train$BsmtQual)
train$BsmtCond <- factor(train$BsmtCond)
train$BsmtExposure <- factor(train$BsmtExposure)
train$BsmtFinType1 <- factor(train$BsmtFinType1)
train$BsmtFinType2 <- factor(train$BsmtFinType2)
train$Heating <- factor(train$Heating)
train$HeatingQC <- factor(train$HeatingQC)
train$CentralAir <- factor(train$CentralAir)
train$KitchenQual <- factor(train$KitchenQual)
train$Functional <- factor(train$Functional)
train$FireplaceQu <- factor(train$FireplaceQu)
train$GarageType <- factor(train$GarageType)
train$GarageFinish <- factor(train$GarageFinish)
train$GarageQual <- factor(train$GarageQual)
train$GarageCond <- factor(train$GarageCond)
train$PavedDrive <- factor(train$PavedDrive)
train$PoolQC <- factor(train$PoolQC)
train$Fence <- factor(train$Fence)
train$SaleType <- factor(train$SaleType)
train$SaleCondition <- factor(train$SaleCondition)
#Keeping only needed columns and adding binary variables for certain features
train <- train %>% dplyr::select(MSSubClass, GrLivArea, Street, Neighborhood, HouseStyle, LotArea, YearBuilt, YearRemodAdd, Utilities, RoofMatl, Exterior1st,
OverallCond, Foundation, BsmtFinType1, FullBath, BsmtFullBath, HalfBath, BsmtHalfBath, Fireplaces,
GarageType, GarageCars, GarageArea, CentralAir, Heating, TotalBsmtSF, WoodDeckSF, OpenPorchSF, EnclosedPorch,
Fence, YrSold, SalePrice) %>%
mutate(NumFullBath = FullBath+BsmtFullBath, NumHalfBath = HalfBath+BsmtHalfBath, Deck = ifelse(WoodDeckSF > 0, 1, 0),
Porch = ifelse(OpenPorchSF+EnclosedPorch>0,1,0), Fence = ifelse(Fence=="none",0,1)) %>%
dplyr::select(-FullBath, -BsmtFullBath, -HalfBath, -BsmtHalfBath, -WoodDeckSF, -OpenPorchSF, -EnclosedPorch, -Street, -Utilities)
#Coercing proper data type
train$MSSubClass <- factor(train$MSSubClass)
train$OverallCond <- factor(train$OverallCond)
train$Fence <- factor(train$Fence)
train$Deck <- factor(train$Deck)
train$Porch <- factor(train$Porch)
#Split data into 2006-2007 and 2008-2010
train.precrash <- train %>% filter(YrSold <= 2007)
train.postcrash <- train %>% filter(YrSold > 2007)
train.precrash <- train.precrash %>% dplyr::select(-YrSold)
train.postcrash <- train.postcrash %>% dplyr::select(-YrSold)
#Remove unneeded vairables
rm(train)
trainIndex.pre <- createDataPartition(train.precrash$Neighborhood, p=0.8, list = F, times=1)
trainIndex.post <- createDataPartition(train.postcrash$Neighborhood, p=0.8, list = F, times=1)
test.precrash <- train.precrash[-trainIndex.pre,]
train.precrash <- train.precrash[trainIndex.pre,]
test.postcrash <- train.postcrash[-trainIndex.post,]
train.postcrash <- train.postcrash[trainIndex.post,]
#Models
#Pre
rf.realistic.pre <- randomForest(SalePrice~., data=train.precrash, ntree=120, importance=TRUE, mtry= 22, nodesize= 50)
pred.pre <- predict(rf.realistic.pre, newdata=test.precrash)
rmse.pre <- sqrt(mean((test.precrash$SalePrice - pred.pre)^2))
#Checking for multicollinearity
#Tons of correlated variables
corrplot(cor(train.precrash[,c(2,5,6,7,13,15,16,19,22,23)]), type = "upper")
#Transform to log
boxcox(SalePrice~., data=train.precrash)
#Alias variables need to remove one
lm.realistic.pre <- lm(log(SalePrice)~., data=train.precrash)
train.precrash <- train.precrash %>% filter(HouseStyle != "1.5Unf")
lm.realistic.pre <- lm(log(SalePrice)~., data=train.precrash)
#Removing highly correlated variables, the rest are categorical variables
vif(lm.realistic.pre) > 10
#Remove multicolinear vars
train.precrash <- train.precrash %>% dplyr::select(-YearRemodAdd, -GarageCars)
#Heating and Fence not significant
lm.realistic.pre <- lm(log(SalePrice)~., data=train.precrash)
#Post
rf.realistic.post <- randomForest(SalePrice~., data=train.postcrash, ntree=120, importance=TRUE, mtry= 24, nodesize= 50)
pred.post <- predict(rf.realistic.post, newdata = test.postcrash)
rmse.post <- sqrt(mean((test.postcrash$SalePrice - pred.post)^2))
#Checking for multicollinearity
corrplot(cor(train.postcrash[,c(2,5,6,7,13,15,16,19,22,23)]), type = "upper")
#Transform to log
boxcox(SalePrice~., data=train.precrash)
lm.realistic.post <- lm(log(SalePrice)~., data=train.postcrash)
vif(lm.realistic.post) > 10
#Remove multicolinear vars
train.postcrash <- train.postcrash %>% dplyr::select(-YearRemodAdd, -GarageCars)
#Deck, Fence, GarageType, RoofMatl not sig
lm.realistic.post <- lm(log(SalePrice)~., data=train.postcrash)
alias(lm.realistic.post)
train.precrash <- train.precrash %>% filter(HouseStyle != "1.5Unf")
lm.realistic.pre <- lm(log(SalePrice)~., data=train.precrash)
vif(lm.realistic.pre) > 10
alias(lm.realistic.post)
train.postcrash <- train.postcrash %>% filter(HouseStyle != "1.5Unf")
lm.realistic.post <- lm(log(SalePrice)~., data=train.postcrash)
vif(lm.realistic.post) > 10
train.postcrash <- train.postcrash %>% dplyr::select(-YearRemodAdd, -GarageCars)
lm.realistic.post <- lm(log(SalePrice)~., data=train.postcrash)
rmse.post
rmse.pre
